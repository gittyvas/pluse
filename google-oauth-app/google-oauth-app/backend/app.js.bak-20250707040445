// google-oauth-app/backend/app.js
// -----------------------------------------------------------------------------
// Main Express application setup for Pulse Google‑OAuth demo.
// Handles:
//   • CORS
//   • Firebase Admin initialisation (Firestore)
//   • Routes: /, /auth, /api, /contacts
//   • Error handling (JSON by default – no missing Jade views)
// -----------------------------------------------------------------------------

require("dotenv").config();

const createError = require("http-errors");
const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const logger = require("morgan");
const cors = require("cors");

// Firebase Admin
const admin = require("firebase-admin");
const { getFirestore } = require("firebase-admin/firestore");

// Routers
const indexRouter = require("./routes/index");
const authRouter = require("./routes/auth");
const apiRouter = require("./routes/api");
const contactsRouter = require("./routes/contacts");

// -----------------------------------------------------------------------------
// Express app instance
// -----------------------------------------------------------------------------
const app = express();

// -----------------------------------------------------------------------------
// 🛡️  CORS – allow only the configured frontend origin
// -----------------------------------------------------------------------------
app.use(
  cors({
    origin: process.env.FRONTEND_URL || "http://localhost:5173",
    credentials: true,
  })
);

// -----------------------------------------------------------------------------
// 🔥  Firebase Admin SDK initialisation
// -----------------------------------------------------------------------------
const serviceAccountJson = process.env.FIREBASE_CONFIG;
if (!serviceAccountJson) {
  throw new Error("FIREBASE_CONFIG env var is missing – cannot start backend");
}

const serviceAccount = JSON.parse(serviceAccountJson);
const appId = process.env.APP_ID || "default-app-id";
console.log(`Backend: Initialising Firebase Admin SDK for APP_ID: ${appId}`);

const firebaseApp = admin.initializeApp(
  {
    credential: admin.credential.cert(serviceAccount),
    projectId: serviceAccount.project_id,
    storageBucket: `${serviceAccount.project_id}.appspot.com`,
    databaseURL: `https://${serviceAccount.project_id}.firebaseio.com`,
  },
  appId
);

app.locals.db = getFirestore(firebaseApp);

// -----------------------------------------------------------------------------
// Global middleware
// -----------------------------------------------------------------------------
app.use(logger("dev"));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));

// -----------------------------------------------------------------------------
// Routes
// -----------------------------------------------------------------------------
app.use("/", indexRouter);
app.use("/auth", authRouter);  // includes /auth/oauth callback that handles login
app.use("/api", apiRouter);
app.use("/contacts", contactsRouter);

// -----------------------------------------------------------------------------
// Dev‑only: list all endpoints for quick debugging
// -----------------------------------------------------------------------------
if (process.env.NODE_ENV !== "production") {
  const listEndpoints = require("express-list-endpoints");
  console.table(listEndpoints(app));
}

// -----------------------------------------------------------------------------
// 404 handler
// -----------------------------------------------------------------------------
app.use((req, res, next) => {
  next(createError(404));
});

// -----------------------------------------------------------------------------
// Error handler – respond with JSON (no Jade template required)
// -----------------------------------------------------------------------------
app.use((err, req, res, next) => {
  console.error("Unhandled error:", err);
  res.status(err.status || 500).json({
    error: err.message || "Internal server error",
    stack: req.app.get("env") === "development" ? err.stack : undefined,
  });
});

module.exports = app;
