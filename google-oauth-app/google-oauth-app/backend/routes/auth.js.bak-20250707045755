// google-oauth-app/google-oauth-app/backend/routes/auth.js
// -----------------------------------------------------------------------------
// Google OAuth 2.0 flow for Pulse backend.
// After exchanging the code for tokens, we now redirect the user back to the
// frontend with BOTH tokens so the React app can establish its own session.
// -----------------------------------------------------------------------------

const express = require("express");
const router = express.Router();
const { google } = require("googleapis");
const { OAuth2Client } = require("google-auth-library");
const jwt = require("jsonwebtoken");
const { getFirestore } = require("firebase-admin/firestore");
require("dotenv").config();

// --- ENV ---------------------------------------------------------------------
const GOOGLE_CLIENT_ID     = process.env.GOOGLE_CLIENT_ID;
const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const REDIRECT_URI         = process.env.REDIRECT_URI;          // http://localhost:3000/auth/oauth
const JWT_SECRET           = process.env.JWT_SECRET;
const FRONTEND_URL         = process.env.FRONTEND_URL || "http://localhost:5173";
const APP_ID               = process.env.APP_ID || "default-app-id";

const client = new OAuth2Client(GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, REDIRECT_URI);

// -----------------------------------------------------------------------------
// Step 1: Kick off OAuth flow
// -----------------------------------------------------------------------------
router.get("/google", (req, res) => {
  const authUrl = client.generateAuthUrl({
    access_type: "offline",
    prompt: "consent",
    scope: [
      "https://www.googleapis.com/auth/userinfo.profile",
      "https://www.googleapis.com/auth/userinfo.email",
      "https://www.googleapis.com/auth/contacts.readonly",
      "https://www.googleapis.com/auth/contacts.other.readonly",
    ],
  });
  console.log("Auth Route: Redirecting to Google OAuth URL:", authUrl);
  res.redirect(`${FRONTEND_URL}/login?${qs}`);
});

// -----------------------------------------------------------------------------
// Step 2: Google redirects back here with ?code=...
// -----------------------------------------------------------------------------
router.get("/oauth", async (req, res) => {
  const { code } = req.query;
  console.log("Auth Route: Received OAuth callback â€“ code", code ? "present" : "missing");

  if (!code) {
    return res.redirect(`${FRONTEND_URL}/login?${qs}`);
  }

  try {
    console.log("Auth Route: Exchanging code for tokens ...");
    const { tokens } = await client.getToken(code);
    console.log("Auth Route: Tokens received!");

    client.setCredentials(tokens);

    // Fetch basic profile
    const oauth2 = google.oauth2({ auth: client, version: "v2" });
    const { data: profile } = await oauth2.userinfo.get();

    // Store / merge in Firestore
    const db   = getFirestore();
    const uid  = profile.id || profile.sub;
    await db.collection(`artifacts/${APP_ID}/users`).doc(uid).set({
      userId: uid,
      email: profile.email,
      name:  profile.name,
      picture: profile.picture,
      googleAccessToken: tokens.access_token,
      googleRefreshToken: tokens.refresh_token || null,
      googleTokenExpiryDate: tokens.expiry_date ? new Date(tokens.expiry_date).toISOString() : null,
      lastLogin: new Date().toISOString(),
    }, { merge: true });

    // OPTIONAL: issue your own app JWT (kept for /api auth)
    const appJwt = jwt.sign({ userId: uid, email: profile.email }, JWT_SECRET, { expiresIn: "1h" });

    // -------------------------------------------------------------------------
    // ðŸ‘‰ Redirect back to React with Google tokens & app JWT
    // -------------------------------------------------------------------------
    const qs = new URLSearchParams({
      access_token: tokens.access_token,
      id_token:     tokens.id_token || "",
      app_token:    appJwt,
      email:        profile.email,
      name:         profile.name,
    }).toString();

    const target = `${FRONTEND_URL}/token?${qs}`;
    console.log("Auth Route: Redirecting to", target);
    return res.redirect(`${FRONTEND_URL}/login?${qs}`);
  } catch (err) {
    console.error("Auth Route: OAuth flow failed:", err);
    return res.redirect(`${FRONTEND_URL}/login?${qs}`);
  }
});

module.exports = router;
